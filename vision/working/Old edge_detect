//Check to see if this pixel has been tried before
	if(done[x][y]==0)
	{
		
		//Check to make sure that there is no object already being looked for
		if(current_object==0)
		{
			
			//Check to see if the pixel is within the threshold value
			if(input_image->bitmap[x][y].blue>threshold->blue)
			{
							
				//Declare that an object is being looked for
				current_object = num_objects + 1;
				
				//Incriment the number of objects found
				num_objects++;
				
				//Set new active object 
				objects[current_object-1].number=current_object;
				
				//Define the new object's colors
				objects[current_object-1].blue = input_image->bitmap[x][y].blue;
				objects[current_object-1].green = input_image->bitmap[x][y].green;
				objects[current_object-1].red = input_image->bitmap[x][y].red;
				
				//---Set the objects box-bound---//
				objects[current_object-1].top = y;
				objects[current_object-1].bottom = y;
				objects[current_object-1].left = x;
				objects[current_object-1].right = x;
				
				
				//Set the "done" flag for this pixel so that it isn't re-evaluated later
				done[x][y] = 1;
				
				//Check pixels in a star pattern around the current pixel
				//Check left pixel
				if(x>0 && done[x-1][y]==0)
					check_pixel(x-1,y, input_image, &input_image->bitmap[x][y], deviation);
				
				//Check right pixel
				if(x<DEFAULT_WIDTH-1 && done[x+1][y]==0)
					check_pixel(x+1,y, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check above pixel
				if(y<DEFAULT_HEIGHT-1 && done[x][y+1]==0)
					check_pixel(x,y+1, input_image,  &input_image->bitmap[x][y], deviation);
				
				//Check below pixel
				if(y>0 && done[x][y-1]==0)
					check_pixel(x,y-1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check top-left pixel
				if(x>0 && y<DEFAULT_HEIGHT-1 && done[x-1][y+1]==0)
					check_pixel(x-1,y+1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check top-right pixel
				if(x<DEFAULT_WIDTH-1 && y<DEFAULT_HEIGHT-1 && done[x+1][y-1]==0)
					check_pixel(x+1,y+1, input_image,  &input_image->bitmap[x][y], deviation);
				
				//Check bottom-left pixel
				if(x>0 && y>0 && done[x-1][y-1]==0)
					check_pixel(x-1,y-1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check bottom-right pixel
				if(x<DEFAULT_WIDTH-1 && y>0 && done[x+1][y-1]==0)
					check_pixel(x+1,y-1, input_image,  &input_image->bitmap[x][y], deviation);
				
				
			}
		}
		else
		{		
			//Check to see if the pixel is within the allowed deviation value
			if(input_image->bitmap[x][y].blue > deviation->blue)
			{
				//---Check to see if the new pixel will affect the box-bound---//
				
				//Check the left bound
				if(x<objects[current_object-1].left)
					objects[current_object-1].left = x;
				
				//Check the right bound
				if(x>objects[current_object-1].right)
					objects[current_object-1].right = x;
					
				//Check the top bound
				if(y>objects[current_object-1].top)
					objects[current_object-1].top = y;
				
				//Check the bottom bound
				if(y<objects[current_object-1].bottom)
					objects[current_object-1].bottom = y;
				
				
			
				//Set the "done" flag for this pixel so that it isn't re-evaluated later
				done[x][y] = 1;
				
				//Check pixels in a star pattern around the current pixel
				//Check left pixel
				if(x>0 && done[x-1][y]==0)
					check_pixel(x-1,y, input_image,  &input_image->bitmap[x][y], deviation);
				
				//Check right pixel
				if(x<DEFAULT_WIDTH-1 && done[x+1][y]==0)
					check_pixel(x+1,y, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check above pixel
				if(y<DEFAULT_HEIGHT-1 && done[x][y+1]==0)
					check_pixel(x,y+1, input_image,  &input_image->bitmap[x][y], deviation);
				
				//Check below pixel
				if(y>0 && done[x][y-1]==0)
					check_pixel(x,y-1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check top-left pixel
				if(x>0 && y<DEFAULT_HEIGHT-1 && done[x-1][y+1]==0)
					check_pixel(x-1,y+1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check top-right pixel
				if(x<DEFAULT_WIDTH-1 && y<DEFAULT_HEIGHT-1 && done[x+1][y-1]==0)
					check_pixel(x+1,y+1, input_image,  &input_image->bitmap[x][y], deviation);
				
				//Check bottom-left pixel
				if(x>0 && y>0 && done[x-1][y-1]==0)
					check_pixel(x-1,y-1, input_image,  &input_image->bitmap[x][y], deviation);
					
				//Check bottom-right pixel
				if(x<DEFAULT_WIDTH-1 && y>0 && done[x+1][y-1]==0)
					check_pixel(x+1,y-1, input_image,  &input_image->bitmap[x][y], deviation);			
			}
		}
	}
	else return;
			