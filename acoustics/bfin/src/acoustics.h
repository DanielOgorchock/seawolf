#ifndef __SEAWOLF3_ACOUSTICS_INCLUDE_H
#define __SEAWOLF3_ACOUSTICS_INCLUDE_H

#include <math_bf.h>
#include <complex_bf.h>

/* A sample from the FPGA/ADC is 16 bits */
typedef fract16 adcsample;

/* Channels */
#define A 0
#define B 1
#define C 2
#define D 3

/* Input data configuration */
#define CHANNELS 4

/* Samples per second generated by the ADC for each channel */
#define SAMPLES_PER_SECOND (96 * 1024)

/* The ADC driver produces data in 8k sample chunks per channel */
#define SAMPLES_PER_CHUNK (8 * 1024) 

/* Number of sample blocks in a circular buffer. Must be a power of 2 */
#define BUFFER_CHUNK_COUNT 4

/* Size of a circular buffer for a single channel */
#define BUFFER_SIZE_CHANNEL (SAMPLES_PER_CHUNK * BUFFER_CHUNK_COUNT)

/* FIR filter coefficient count */
#define FIR_COEF_COUNT 151

/* Minimum value to trigger on */
#define TRIGGER_VALUE ((short)(80))

/* Shift the trigger_point by this much to tune the placement of the ping within
   the correlation blocks */
#define TRIGGER_POINT_OFFSET 200

/* Channel scanned to locating the ping coming in */
#define TRIGGER_CHANNEL A

/* Correlations are performed in a neighborhood of the trigger_point that
   extends from trigger_point - CORR_RANGE to trigger_point + CORR_RANGE */
#define CORR_RANGE 200

/* The correlation block will consider possible lag value between -CORR_LAG_MAX
   and CORR_LAG_MAX */
#define CORR_LAG_MAX 100 

/* To find the approximate mean of the signal average this many points at the
   beginning of the data set */
#define AVG_COUNT 100

/* Circular buffer state */
#define READING   0x00
#define TRIGGERED 0x01
#define DONE      0x02

/* Extra number of read cyles to perform after trigger. This can be used to
   "pad" the other channels and ensure that the trigger is present in all
   channels */
#define EXTRA_READS 1

/* Profiling helpers */
#ifdef ACOUSTICS_PROFILE
# define TIME_PRE(t, text) do {                    \
        printf("%-30s", (text));                   \
        fflush(stdout);                            \
        Timer_reset(t);                            \
    } while(false)
# define TIME_POST(t) do {                      \
        printf("%5.3f\n", Timer_getDelta(t));   \
    } while(false)
#else
# define TIME_PRE(t, text) do { } while(false)
# define TIME_POST(t) do { } while(false)
#endif

/* Support routines */
void load_coefs(fract16* coefs, char* coef_file_name, int num_coefs);
int find_max_cmplx(complex_fract16* w, int size);
void multiply(complex_fract16* in1, complex_fract16* in2, complex_fract16* out, int size);
void conjugate(complex_fract16* w, int size);

#endif // #ifndef __SEAWOLF3_ACOUSTICS_INCLUDE_H
